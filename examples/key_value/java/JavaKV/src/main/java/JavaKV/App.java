/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package JavaKV;

import java.util.List;
import java.util.concurrent.CancellationException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;

import key_value_protoc.Messages.*;

import com.google.protobuf.InvalidProtocolBufferException;
import com.ubinder.FutureUbinder;


public class App {

    private static final int NUMBER_OF_REQUESTS = 10;

    public static byte[] AddValueMsg(String key, String value) {
        AddValueRequest addVal = AddValueRequest
            .newBuilder()
            .setKey(key)
            .setValue(value)
            .build();
        return Request.newBuilder().setRequestType(RequestType.ADD_VALUE).setRequestBody(addVal.toByteString()).build().toByteArray();
    }

    public static byte[] GetValueMsg(String key) {
        GetValueRequest getVal = GetValueRequest
            .newBuilder()
            .setKey(key)
            .build();
        return Request.newBuilder().setRequestType(RequestType.GET_VALUE).setRequestBody(getVal.toByteString()).build().toByteArray();
    }

    public static void main(String[] args) {
        System.out.println("Start");
        App app = new App();
        FutureUbinder ubinder = new FutureUbinder(null, null);
        CompletableFuture<String>[] resultFutures = new CompletableFuture[NUMBER_OF_REQUESTS];
        for (int i = 0; i < NUMBER_OF_REQUESTS; ++i) {
            final int idx = i;
            
            resultFutures[i] =
                ubinder
                    .SendRequest(AddValueMsg("key" + Integer.toString(idx), "value" + Integer.toString(idx)))
                    .thenApply((data) -> {
                        try { return AddValueResponse.parseFrom(data); }
                        catch (InvalidProtocolBufferException ex) {
                            throw new CompletionException(ex);
                        }
                    })
                    .thenCompose( (response) -> {
                        String error = response.getError();
                        if ( error == null) {
                            throw new RuntimeException(error);
                        }
                        return ubinder.SendRequest(GetValueMsg("key" + Integer.toString(idx)));
                    })
                    .thenApply((data) -> {
                        try { return GetValueResponse.parseFrom(data);}
                        catch (InvalidProtocolBufferException ex) {
                            throw new CompletionException(ex);
                        }})
                    .thenApply((response) -> {
                        String error = response.getError();
                        if ( error == null) {
                            throw new RuntimeException(error);
                        }
                        return response.getValue();
                    })
                    .exceptionally(ex -> "Error happaned " + ex.getMessage());
        }
        try {
            CompletableFuture.allOf(resultFutures)
            .thenRun(()->{
                for (CompletableFuture<String> resFuture : resultFutures) {
                    System.out.println(resFuture.join());
                }
            }).join();
        }
        catch (CompletionException ex) {
            System.out.println("CompletionException happened");
            System.out.println(ex.getMessage());
        }
    }
}
